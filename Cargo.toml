[package]
name = "vibe_coding_tracker"
version = "0.0.0"
edition = "2024"
rust-version = "1.85"
authors = ["Wei Lee <mai@mai0313.com>"]
description = "Vibe Coding Tracker - AI coding assistant telemetry/usage parser, aggregate JSONL events into CodeAnalysis results"
license = "MIT"
readme = "README.md"
homepage = "https://github.com/Mai0313/VibeCodingTracker"
repository = "https://github.com/Mai0313/VibeCodingTracker"

[[bin]]
name = "vibe_coding_tracker"
path = "src/main.rs"

[dependencies]
# CLI
clap = { version = "4.5", features = ["derive", "env"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# Error handling
anyhow = "1.0"

# Time and date
chrono = { version = "0.4", features = ["serde"] }

# Regular expressions
regex = "1.11"

# File system and path handling
walkdir = "2.5"
home = "0.5"

# Logging (optional)
env_logger = "0.11"
log = "0.4"

# Hostname
hostname = "0.4"

# Terminal UI and styling
owo-colors = "4.2"
comfy-table = "7.2"
ratatui = "0.29"
crossterm = "0.29"

# HTTP client
reqwest = { version = "0.12", default-features = false, features = ["blocking", "json", "rustls-tls"] }

# String similarity
strsim = "0.11"

# Parallel processing
rayon = "1.10"

# Fast integer formatting
itoa = "1.0"

# System information
sysinfo = "0.36"

# Semantic versioning
semver = "1.0"

# Fast byte counting for line counting optimization
bytecount = "0.6"

# Fast memchr for string operations
memchr = "2.7"

# High-performance memory allocator
mimalloc = { version = "0.1", default-features = false }

# Archive extraction for update functionality
flate2 = "1.1"
tar = "0.4"
zip = "5.1"

# Lazy static initialization
once_cell = "1.20"

# Fast HashMap implementation with serde support
ahash = { version = "0.8", features = ["serde"] }

# LRU cache for bounded memory usage
lru = "0.12"

[dev-dependencies]
tempfile = "3.23"
assert_cmd = "2.0"
predicates = "3.1"
criterion = { version = "0.5", features = ["html_reports"] }

[[bench]]
name = "benchmarks"
harness = false

[profile.release]
opt-level = 3              # Maximum optimization
lto = "thin"               # Link-time optimization
codegen-units = 1          # Better optimization at cost of compile time
strip = "symbols"          # Strip symbols for smaller binary
panic = "abort"            # Smaller binary, faster panic handling
overflow-checks = false    # Disable overflow checks in release (faster)

# Profile for distribution builds with maximum optimization
[profile.dist]
inherits = "release"
lto = "fat"                # Full LTO for maximum performance
opt-level = 3
codegen-units = 1
strip = "symbols"
panic = "abort"
