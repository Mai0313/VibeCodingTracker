[package]
name = "vibe_coding_tracker"
version = "0.0.0"
edition = "2024"
rust-version = "1.85"
authors = ["Wei Lee <mai@mai0313.com>"]
description = "Vibe Coding Tracker - AI coding assistant telemetry/usage parser, aggregate JSONL events into CodeAnalysis results"
license = "MIT"
readme = "README.md"
homepage = "https://github.com/Mai0313/VibeCodingTracker"
repository = "https://github.com/Mai0313/VibeCodingTracker"

[[bin]]
name = "vibe_coding_tracker"
path = "src/main.rs"

[dependencies]
# CLI
clap = { version = "4.5", features = ["derive", "env"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# Error handling
anyhow = "1.0"

# Time and date
chrono = { version = "0.4", features = ["serde"] }

# Regular expressions
regex = "1.11"

# File system and path handling
walkdir = "2.5"
home = "0.5"

# Logging (optional)
env_logger = "0.11"
log = "0.4"

# Hostname
hostname = "0.4"

# Terminal UI and styling
owo-colors = "4.2"
comfy-table = "7.2"
ratatui = "0.29"
crossterm = "0.29"

# HTTP client
reqwest = { version = "0.12", default-features = false, features = [
    "blocking",
    "json",
    "rustls-tls",
] }

# String similarity
strsim = "0.11"

# Parallel processing
rayon = "1.10"

# Fast integer formatting
itoa = "1.0"

# System information
sysinfo = "0.36"

# Semantic versioning
semver = "1.0"

# Fast byte counting for line counting optimization
bytecount = "0.6"

# Fast memchr for string operations
memchr = "2.7"

# High-performance memory allocator
mimalloc = { version = "0.1", default-features = false }

# Archive extraction for update functionality
flate2 = "1.1"
tar = "0.4"
zip = "5.1"

# Lazy static initialization
once_cell = "1.20"

# Fast HashMap implementation with serde support
ahash = { version = "0.8", features = ["serde"] }

# LRU cache for bounded memory usage
lru = "0.12"

[dev-dependencies]
tempfile = "3.23"
assert_cmd = "2.0"
predicates = "3.1"
criterion = { version = "0.5", features = ["html_reports"] }

[[bench]]
name = "benchmarks"
harness = false

[profile.release]
opt-level = 3           # Maximum optimization
lto = "thin"            # Link-time optimization
codegen-units = 1       # Better optimization at cost of compile time
strip = "symbols"       # Strip symbols for smaller binary
panic = "abort"         # Smaller binary, faster panic handling
overflow-checks = false # Disable overflow checks in release (faster)

# Profile for distribution builds with maximum optimization
[profile.dist]
inherits = "release"
lto = "fat"          # Full LTO for maximum performance
opt-level = 3
codegen-units = 1
strip = "symbols"
panic = "abort"

[package.metadata.git-cliff.changelog]
# A Tera template to be rendered for each release in the changelog.
# See https://keats.github.io/tera/docs/#introduction
body = """
## What's Changed

{%- if version %} in {{ version | trim_start_matches(pat="v") }}{%- endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
### {{ group | striptags | trim | upper_first }}
{% for commit in commits %}
  {% if commit.remote.pr_title -%}
    {%- set commit_message = commit.remote.pr_title -%}
  {%- else -%}
    {%- set commit_message = commit.message -%}
  {%- endif -%}
  - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
    {% if commit.breaking %}[**breaking**] {% endif %}\
    {{ commit_message | split(pat="\n") | first | trim | upper_first }}\
    {% if commit.remote.username %} by @{{ commit.remote.username }}{%- endif -%}
    {% if commit.remote.pr_number %} in \
      [#{{ commit.remote.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.remote.pr_number }}) \
    {%- endif %}
{%- endfor %}
{% endfor %}

{%- if github -%}
{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  {% raw %}\n{% endraw -%}
### New Contributors
{%- endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor -%}
{%- endif -%}

{% if version %}
    {% if previous.version %}
      **Full Changelog**: {{ self::remote_url() }}/compare/{{ previous.version }}...{{ version }}
    {% endif %}
{% else -%}
  {% raw %}\n{% endraw %}
{% endif %}

{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}
"""
# Remove leading and trailing whitespaces from the changelog's body.
trim = true
# Render body even when there are no releases to process.
render_always = true
# An array of regex based postprocessors to modify the changelog.
postprocessors = [
    # Replace the placeholder <REPO> with a URL.
    # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" },
]

[package.metadata.git-cliff.git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = true
# Require all commits to be conventional.
# Takes precedence over filter_unconventional.
require_conventional = false
# Split commits on newlines, treating each line as an individual commit.
split_commits = false
# An array of regex based parsers to modify commit messages prior to further processing.
commit_preprocessors = [{ pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" }]
# Prevent commits that are breaking from being excluded by commit parsers.
protect_breaking_commits = false
# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->üöÄ Features" },
    { message = "^fix", group = "<!-- 1 -->üêõ Bug Fixes" },
    { message = "^doc", group = "<!-- 3 -->üìö Documentation" },
    { message = "^perf", group = "<!-- 4 -->‚ö° Performance" },
    { message = "^refactor", group = "<!-- 2 -->üöú Refactor" },
    { message = "^style", group = "<!-- 5 -->üé® Styling" },
    { message = "^test", group = "<!-- 6 -->üß™ Testing" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore|^ci", group = "<!-- 7 -->‚öôÔ∏è Miscellaneous Tasks" },
    { body = ".*security", group = "<!-- 8 -->üõ°Ô∏è Security" },
    { message = "^revert", group = "<!-- 9 -->‚óÄÔ∏è Revert" },
    { message = ".*", group = "<!-- 10 -->üíº Other" },
]
# Exclude commits that are not matched by any commit parser.
filter_commits = false
# An array of link parsers for extracting external references, and turning them into URLs, using regex.
link_parsers = []
# Include only the tags that belong to the current branch.
use_branch_tags = false
# Order releases topologically instead of chronologically.
topo_order = false
# Order releases topologically instead of chronologically.
topo_order_commits = true
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "oldest"
# Process submodules commits
recurse_submodules = false

[package.metadata.git-cliff.bump]
features_always_bump_minor = false
breaking_always_bump_major = false
custom_major_increment_regex = "major"
custom_minor_increment_regex = "minor|more"
initial_tag = "v0.0.0"
